AWSTemplateFormatVersion: 2010-09-09
Description: >
  CloudFormation template for Stock Analysis Platform (Live)
  Architecture includes ALB, Auto Scaling Group, EC2, RDS, DynamoDB,
  Lambda (Event-based), AWS Batch, and Cognito.

Parameters:
  VpcCIDR:
    Type: String
    Default: 10.0.0.0/16
  PublicSubnet1CIDR:
    Type: String
    Default: 10.0.1.0/24
  PublicSubnet2CIDR:
    Type: String
    Default: 10.0.2.0/24
  PrivateSubnet1CIDR:
    Type: String
    Default: 10.0.3.0/24
  PrivateSubnet2CIDR:
    Type: String
    Default: 10.0.4.0/24
  KeyPairName:
    Type: AWS::EC2::KeyPair::KeyName
  DBUser:
    Type: String
  DBPassword:
    Type: String
    NoEcho: true

Resources:
  ### --- Networking ---
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCIDR
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: StockAppVPC

  InternetGateway:
    Type: AWS::EC2::InternetGateway

  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PublicSubnet1CIDR
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Select [0, !GetAZs '']
      Tags: [{ Key: Name, Value: PublicSubnet1 }]

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PublicSubnet2CIDR
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Select [1, !GetAZs '']
      Tags: [{ Key: Name, Value: PublicSubnet2 }]

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PrivateSubnet1CIDR
      MapPublicIpOnLaunch: false
      AvailabilityZone: !Select [0, !GetAZs '']
      Tags: [{ Key: Name, Value: PrivateSubnet1 }]

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PrivateSubnet2CIDR
      MapPublicIpOnLaunch: false
      AvailabilityZone: !Select [1, !GetAZs '']
      Tags: [{ Key: Name, Value: PrivateSubnet2 }]

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC

  PublicRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnet1RouteTableAssoc:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable

  PublicSubnet2RouteTableAssoc:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRouteTable

  ### --- Security Groups ---
  InstanceSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow HTTP/HTTPS and DB access
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 5432
          ToPort: 5432
          SourceSecurityGroupId: !Ref InstanceSG

  ### --- EC2 Auto Scaling + Load Balancer ---
  LaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateData:
        ImageId: ami-0c55b159cbfafe1f0  # (Replace with regionâ€™s latest Amazon Linux)
        InstanceType: t3.micro
        KeyName: !Ref KeyPairName
        SecurityGroupIds: [!Ref InstanceSG]
        UserData:
          Fn::Base64: |
            #!/bin/bash
            yum update -y
            yum install -y python3 git
            cd /home/ec2-user
            git clone https://github.com/cloudy0310/INF-2003-INF-2006-.git
            cd INF-2003-INF-2006-
            pip3 install -r requirements.txt
            nohup streamlit run app.py --server.port 80 &

  ALB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: StockAppALB
      Scheme: internet-facing
      Subnets: [!Ref PublicSubnet1, !Ref PublicSubnet2]
      SecurityGroups: [!Ref InstanceSG]

  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Port: 80
      Protocol: HTTP
      VpcId: !Ref VPC
      TargetType: instance
      HealthCheckPath: /

  ALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref ALB
      Port: 80
      Protocol: HTTP
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroup

  AutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier: [!Ref PublicSubnet1, !Ref PublicSubnet2]
      LaunchTemplate:
        LaunchTemplateId: !Ref LaunchTemplate
        Version: !GetAtt LaunchTemplate.LatestVersionNumber
      MinSize: 2
      MaxSize: 4
      DesiredCapacity: 2
      TargetGroupARNs: [!Ref TargetGroup]

  ### --- RDS (PostgreSQL) ---
  RDSInstance:
    Type: AWS::RDS::DBInstance
    Properties:
      DBInstanceIdentifier: stockapp-db
      AllocatedStorage: 20
      DBInstanceClass: db.t3.micro
      Engine: postgres
      MasterUsername: !Ref DBUser
      MasterUserPassword: !Ref DBPassword
      PubliclyAccessible: false
      VPCSecurityGroups: [!Ref InstanceSG]
      DBSubnetGroupName: !Ref DBSubnetGroup

  DBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: Subnet group for RDS
      SubnetIds: [!Ref PrivateSubnet1, !Ref PrivateSubnet2]

  ### --- DynamoDB ---
  DynamoDBTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: StockNews
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: news_id
          AttributeType: S
      KeySchema:
        - AttributeName: news_id
          KeyType: HASH

  ### --- Lambda Functions ---
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/AmazonRDSFullAccess
        - arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess

  LambdaStockEvent:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: FetchStockData
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        ZipFile: |
          def handler(event, context):
              print("Fetching stock data...")
      Runtime: python3.12
      Timeout: 60

  LambdaNewsEvent:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: SummarizeNews
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        ZipFile: |
          def handler(event, context):
              print("Summarizing news articles...")
      Runtime: python3.12
      Timeout: 60

  StockEventRule:
    Type: AWS::Events::Rule
    Properties:
      ScheduleExpression: rate(1 day)
      Targets:
        - Arn: !GetAtt LambdaStockEvent.Arn
          Id: StockTarget

  NewsEventRule:
    Type: AWS::Events::Rule
    Properties:
      ScheduleExpression: rate(12 hours)
      Targets:
        - Arn: !GetAtt LambdaNewsEvent.Arn
          Id: NewsTarget

  ### --- AWS Batch ---
  BatchServiceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: batch.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSBatchServiceRole

  BatchComputeEnvironment:
    Type: AWS::Batch::ComputeEnvironment
    Properties:
      ComputeEnvironmentName: StockBatchEnv
      Type: MANAGED
      State: ENABLED
      ServiceRole: !Ref BatchServiceRole
      ComputeResources:
        Type: EC2
        MinvCpus: 0
        MaxvCpus: 4
        InstanceTypes: [t3.micro]
        Subnets: [!Ref PrivateSubnet1, !Ref PrivateSubnet2]
        SecurityGroupIds: [!Ref InstanceSG]

  BatchJobQueue:
    Type: AWS::Batch::JobQueue
    Properties:
      ComputeEnvironmentOrder:
        - Order: 1
          ComputeEnvironment: !Ref BatchComputeEnvironment
      Priority: 1

  ### --- Cognito ---
  CognitoUserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: StockAppUserPool
      AutoVerifiedAttributes: ["email"]

  CognitoIdentityPool:
    Type: AWS::Cognito::IdentityPool
    Properties:
      IdentityPoolName: StockAppIdentityPool
      AllowUnauthenticatedIdentities: false

Outputs:
  LoadBalancerDNS:
    Description: ALB endpoint for web app
    Value: !GetAtt ALB.DNSName
  RDSEndpoint:
    Description: PostgreSQL endpoint
    Value: !GetAtt RDSInstance.Endpoint.Address
  DynamoDBTableName:
    Description: DynamoDB table name
    Value: !Ref DynamoDBTable
  CognitoPoolId:
    Description: Cognito User Pool ID
    Value: !Ref CognitoUserPool
